---
- name: Gather facts
  setup:

- name: Ensure localhost in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^127.0.0.1.*"
    line: "127.0.0.1 localhost"
    state: present
  become: True

- name: Generate /etc/hosts for all of the nodes
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE GENERATED HOSTS"
    block: |
        {% for host in groups['baremetal'] %}
        {% set api_interface = hostvars[host]['api_interface'] %}
        {{ hostvars[host]['ansible_' + api_interface]['ipv4']['address'] }} {{ hostvars[host]['ansible_hostname'] }}
        {% endfor %}
  become: True

- name: Configure apt source files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - {"src": sources.list.j2, "dest": /etc/apt/sources.list}
  when:
    - inventory_hostname in groups['kubernetes']
    - ansible_distribution == 'Ubuntu'

- name: Apt update for ubuntu
  apt:
    update_cache: yes
  when:
    - inventory_hostname in groups['kubernetes']
    - ansible_distribution == 'Ubuntu'

- name: Install epel-release packages
  package:
    name: epel-release
    state: present
  when:
    - inventory_hostname in groups['kubernetes']
    - ansible_distribution == 'CentOS'

- name: Install dependent packages for kubernetes nodes
  package:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ common_dependent_packages }}"
  when:
    - inventory_hostname in groups['kubernetes']

- name: Create pip directory if it does not exist
  file:
    path: ~/.pip
    state: directory
    mode: '0755'

- name: Configure pip source files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - {"src": pip.conf.j2, "dest": ~/.pip/pip.conf}

- name: Install six pyyaml python package
  pip:
    name:
      - six
      - pyyaml

- name: Change state of selinux
  selinux:
    policy: targeted
    state: "{{ selinux_state }}"
  become: true
  when:
    - change_selinux | bool
    - inventory_hostname in groups['baremetal']
    - ansible_distribution == 'CentOS'

# Try to stop and disable delegated service,
# let it go when not exists.
- name: Disable firewalld service
  service:
    name: "{{ item }}"
    state: stopped
    enabled: False
  failed_when: false
  loop: "{{ services_to_disabled }}"
  when:
    - inventory_hostname in groups['baremetal']
