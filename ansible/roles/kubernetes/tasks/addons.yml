---
# NOTE(caoyingjun): The helm3 installation for helm3 is so rough.
# It must will be optimised later.
- name: Apply helm3 command immediately
  script: setup_helm.sh "{{ helm_image }}"
  changed_when: false
  when:
    - enable_helm | bool
    - inventory_hostname in groups['kube-master']

- name: Copy kube-prometheus applications
  copy:
    src: prometheus
    dest: "{{ kube_application_dir }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  register: prom_result
  when: enable_prometheus | bool
  run_once: True

- name: Apply kube-prometheus applications
  kube_toolbox:
     module_name: kubectl
     module_args: "apply -f {{ item }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: True
  when:
    - enable_prometheus | bool
    - prom_result.changed
  loop:
    - "{{ kube_application_dir }}/prometheus/setup"
    - "{{ kube_application_dir }}/prometheus"

- name: Copy Fluentd-Elasticsearch applications
  copy:
    src: fluentd-elasticsearch
    dest: "{{ kube_application_dir }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  register: fe_result
  when: enable_fluentd_elasticsearch | bool
  run_once: True

- name: Apply Fluentd-Elasticsearch applications
  kube_toolbox:
     module_name: kubectl
     module_args: "apply -f {{ item }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: True
  when:
    - enable_fluentd_elasticsearch | bool
    - fe_result.changed
  loop:
    - "{{ kube_application_dir }}/fluentd-elasticsearch"

- name: Copy Harbor applications
  copy:
    src: harbor
    dest: "{{ kube_application_dir }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  when: enable_harbor | bool
  run_once: True

- name: Install Harbor applications by helm3
  helm_toolbox:
    name: "{{ harbor_name }}"
    namespace: "{{ harbor_namespace }}"
    chart: "{{ kube_application_dir }}/harbor"
    chart_extra_vars:
      expose.type: "{{ expose_type }}"
      expose.tls.enabled: 'false'
      expose.nodePort.ports.http.nodePort: "{{ '' if expose_type == 'ingress' else expose_nodeport }}"
      expose.ingress.hosts.core: "{{ expose_core_domain if expose_type == 'ingress' else '' }}"
      expose.ingress.hosts.notary: "{{ expose_notary_domain if expose_type == 'ingress' else '' }}"
      persistence.persistentVolumeClaim.registry.storageClass: "{{ harbor_storage_class }}"
      persistence.persistentVolumeClaim.chartmuseum.storageClass: "{{ harbor_storage_class }}"
      persistence.persistentVolumeClaim.jobservice.storageClass: "{{ harbor_storage_class }}"
      persistence.persistentVolumeClaim.database.storageClass: "{{ harbor_storage_class }}"
      persistence.persistentVolumeClaim.redis.storageClass: "{{ harbor_storage_class }}"
      persistence.persistentVolumeClaim.trivy.storageClass: "{{ harbor_storage_class }}"
      externalURL: "{{ 'https://' if expose_type == 'ingress' else 'http://' }}{{ expose_core_domain if expose_type == 'ingress' else hostvars[groups['kube-master'][0]]['ansible_' + network_interface]['ipv4']['address'] }}{{ '' if expose_type == 'ingress' else ':' }}{{ '' if expose_type == 'ingress' else expose_nodeport }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  when: enable_harbor | bool
  run_once: True

- name: Install Gerrit applications by helm-apply
  import_role:
    role: helm-apply
  vars:
    name: "{{ gerrit_name }}"
    namespace: "{{ gerrit_namespace }}"
    chart: gerrit
    release_enabled: "{{ enable_gerrit }}"
    chart_extra_vars:
      gerrit.service.type: "{{ gerrit_service_type }}"

- name: Install Mariadb applications by helm-apply
  import_role:
    role: helm-apply
  vars:
    name: "{{ mariadb_name }}"
    namespace: "{{ mariadb_namespace }}"
    chart: mariadb
    release_enabled: "{{ enable_mariadb }}"
    chart_extra_vars:
      global.storageClass: "{{ mariadb_storage_class }}"
      primary.persistence.storageClass: "{{ mariadb_storage_class }}"
      secondary.persistence.storageClass: "{{ mariadb_storage_class }}"

- name: Install Kong applications by helm-apply
  import_role:
    role: helm-apply
  vars:
    name: "{{ kong_name }}"
    namespace: "{{ kong_namespace }}"
    chart: kong
    release_enabled: "{{ enable_kong }}"

- name: Install Redis applications by helm-apply
  import_role:
    role: helm-apply
  vars:
    name: "{{ redis_name }}"
    namespace: "{{ redis_namespace }}"
    chart: redis
    release_enabled: "{{ enable_redis }}"
    chart_extra_vars:
      global.storageClass: "{{ redis_storage_class }}"
      master.persistence.storageClass: "{{ redis_storage_class }}"
      slave.persistence.storageClass: "{{ redis_storage_class }}"
